[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "EmailUserAdmin",
        "importPath": "custom_user.admin",
        "description": "custom_user.admin",
        "isExtraImport": true,
        "detail": "custom_user.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "isExtraImport": true,
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "pyexpat.errors",
        "description": "pyexpat.errors",
        "isExtraImport": true,
        "detail": "pyexpat.errors",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib ",
        "description": "django.contrib ",
        "isExtraImport": true,
        "detail": "django.contrib ",
        "documentation": {}
    },
    {
        "label": "generic",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "VideosSearch",
        "importPath": "youtubesearchpython",
        "description": "youtubesearchpython",
        "isExtraImport": true,
        "detail": "youtubesearchpython",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "wikipedia",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wikipedia",
        "description": "wikipedia",
        "detail": "wikipedia",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "dashboard",
        "description": "dashboard",
        "isExtraImport": true,
        "detail": "dashboard",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dashboard.migrations.0001_initial",
        "description": "dashboard.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Notes',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "dashboard.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dashboard.migrations.0002_alter_notes_options_homework",
        "description": "dashboard.migrations.0002_alter_notes_options_homework",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('dashboard', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='notes',\n            options={'verbose_name': 'notes', 'verbose_name_plural': 'notes'},\n        ),",
        "detail": "dashboard.migrations.0002_alter_notes_options_homework",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dashboard.migrations.0003_todo",
        "description": "dashboard.migrations.0003_todo",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('dashboard', '0002_alter_notes_options_homework'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Todo',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "dashboard.migrations.0003_todo",
        "documentation": {}
    },
    {
        "label": "CodeblazeStudyAppUserAdmin",
        "kind": 6,
        "importPath": "dashboard.admin",
        "description": "dashboard.admin",
        "peekOfCode": "class CodeblazeStudyAppUserAdmin(EmailUserAdmin):\n    pass\nadmin.site.register(Notes)\nadmin.site.register(Homework)\nadmin.site.register(Todo)\nadmin.site.register(CodeBlazeStudyAppUser)",
        "detail": "dashboard.admin",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "dashboard.apps",
        "description": "dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'dashboard'",
        "detail": "dashboard.apps",
        "documentation": {}
    },
    {
        "label": "NotesForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class NotesForm(forms.ModelForm):\n    class Meta:\n        model=Notes\n        fields=['title','description']\nclass DateInput(forms.DateInput):\n    input_type='date'\nclass HomeworkForm(forms.ModelForm):\n    class Meta:\n        model=Homework\n        widgets={'due':DateInput()}",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "DateInput",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class DateInput(forms.DateInput):\n    input_type='date'\nclass HomeworkForm(forms.ModelForm):\n    class Meta:\n        model=Homework\n        widgets={'due':DateInput()}\n        fields=['subject','title','description','due','is_finished']\nclass DashboardForm(forms.Form):\n    text=forms.CharField(max_length=100,label=\"Enter your Search\")\nclass TodoForm(forms.ModelForm):",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "HomeworkForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class HomeworkForm(forms.ModelForm):\n    class Meta:\n        model=Homework\n        widgets={'due':DateInput()}\n        fields=['subject','title','description','due','is_finished']\nclass DashboardForm(forms.Form):\n    text=forms.CharField(max_length=100,label=\"Enter your Search\")\nclass TodoForm(forms.ModelForm):\n    class Meta:\n        model=Todo",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "DashboardForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class DashboardForm(forms.Form):\n    text=forms.CharField(max_length=100,label=\"Enter your Search\")\nclass TodoForm(forms.ModelForm):\n    class Meta:\n        model=Todo\n        fields=['title','is_finished']\nclass ConversionForm(forms.Form):\n    CHOICES=[('length','Length'),('mass','Mass')]\n    measurement=forms.ChoiceField(choices=CHOICES,widget=forms.RadioSelect)\nclass ConversionLengthForm(forms.Form):",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "TodoForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class TodoForm(forms.ModelForm):\n    class Meta:\n        model=Todo\n        fields=['title','is_finished']\nclass ConversionForm(forms.Form):\n    CHOICES=[('length','Length'),('mass','Mass')]\n    measurement=forms.ChoiceField(choices=CHOICES,widget=forms.RadioSelect)\nclass ConversionLengthForm(forms.Form):\n    CHOICES=[('yard','Yard'),('foot','Foot')]\n    input=forms.CharField(required=False,label=False,widget=forms.TextInput(",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "ConversionForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class ConversionForm(forms.Form):\n    CHOICES=[('length','Length'),('mass','Mass')]\n    measurement=forms.ChoiceField(choices=CHOICES,widget=forms.RadioSelect)\nclass ConversionLengthForm(forms.Form):\n    CHOICES=[('yard','Yard'),('foot','Foot')]\n    input=forms.CharField(required=False,label=False,widget=forms.TextInput(\n        attrs={'type':'number','placeholder':'Enter the Number'}\n    ))\n    measure1=forms.CharField(\n        label='',widget=forms.Select(choices=CHOICES)",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "ConversionLengthForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class ConversionLengthForm(forms.Form):\n    CHOICES=[('yard','Yard'),('foot','Foot')]\n    input=forms.CharField(required=False,label=False,widget=forms.TextInput(\n        attrs={'type':'number','placeholder':'Enter the Number'}\n    ))\n    measure1=forms.CharField(\n        label='',widget=forms.Select(choices=CHOICES)\n    )\n    measure2=forms.CharField(\n        label='',widget=forms.Select(choices=CHOICES)",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "ConversionMassForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class ConversionMassForm(forms.Form):\n    CHOICES=[('pound','Pound'),('kilogram','Kilogram')]\n    input=forms.CharField(required=False,label=False,widget=forms.TextInput(\n        attrs={'type':'number','placeholder':'Enter the Number'}\n    ))\n    measure1=forms.CharField(\n        label='',widget=forms.Select(choices=CHOICES)\n    )\n    measure2=forms.CharField(\n        label='',widget=forms.Select(choices=CHOICES)",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "UserRegistrationForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class UserRegistrationForm(UserCreationForm):\n    first_name=forms.CharField()\n    last_name=forms.CharField()\n    email=forms.EmailField(required=True)\n    class Meta:\n        model=CodeBlazeStudyAppUser\n        fields=['first_name','last_name','email','password1','password2']\n        USERNAME_FIELD='email'",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "CodeBlazeStudyAppUser",
        "kind": 6,
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "peekOfCode": "class CodeBlazeStudyAppUser(AbstractUser):\n    STATUS=(\n        ('regular','regular'),\n        ('subscriber','subscriber'),\n        ('moderator','moderator')\n    )\n    email=models.EmailField(unique=True)\n    status=models.CharField(max_length=100,choices=STATUS,default='regular')\n    description=models.TextField(\"Description\",max_length=600,default='',blank=True)\n    def __str__(self):",
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "Notes",
        "kind": 6,
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "peekOfCode": "class Notes(models.Model):\n    user=models.ForeignKey(User,on_delete=models.CASCADE)\n    title=models.CharField(max_length=200)\n    description=models.TextField()\n    def __str__(self):\n        return self.title\n    class Meta:\n        verbose_name=\"notes\"\n        verbose_name_plural=\"notes\"\nclass Homework(models.Model):",
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "Homework",
        "kind": 6,
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "peekOfCode": "class Homework(models.Model):\n    user=models.ForeignKey(User,on_delete=models.CASCADE)\n    subject=models.CharField(max_length=50)\n    title=models.CharField(max_length=100)\n    description=models.TextField()\n    due=models.DateTimeField()\n    is_finished=models.BooleanField(default=False)\n    def __str__(self):\n        return self.title\nclass Todo(models.Model):",
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "peekOfCode": "class Todo(models.Model):\n    user= models.ForeignKey(User,on_delete=models.CASCADE)\n    title=models.CharField(max_length=100)\n    is_finished=models.BooleanField(default=False)\n    def __str__(self):\n        return self.title",
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "NotesDetailView",
        "kind": 6,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "class NotesDetailView(generic.DetailView):\n    model=Notes\n@login_required\ndef homework(request):\n    if request.method==\"POST\":\n        form=HomeworkForm(request.POST)\n        if form.is_valid():\n            try:\n                finished=request.POST['is_finished']\n                if finished == 'on':",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def index(request):\n    return render(request,'dashboard/index.html')\n@login_required\ndef notes(request):\n    if request.method=='POST':\n        form=NotesForm(request.POST)\n        if form.is_valid():\n            notes=Notes(user=request.user,title=request.POST['title'],description=request.POST['description'])\n            notes.save()\n        messages.success(request,f\"Notes Added from {request.user.first_name} {request.user.last_name} Successfully!\")",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "notes",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def notes(request):\n    if request.method=='POST':\n        form=NotesForm(request.POST)\n        if form.is_valid():\n            notes=Notes(user=request.user,title=request.POST['title'],description=request.POST['description'])\n            notes.save()\n        messages.success(request,f\"Notes Added from {request.user.first_name} {request.user.last_name} Successfully!\")\n    form=NotesForm()\n    notes=Notes.objects.filter(user=request.user)\n    context={'notes':notes,'form':form}",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "delete_note",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def delete_note(request,pk=None):\n    Notes.objects.get(id=pk).delete()\n    return redirect(\"notes\")\nclass NotesDetailView(generic.DetailView):\n    model=Notes\n@login_required\ndef homework(request):\n    if request.method==\"POST\":\n        form=HomeworkForm(request.POST)\n        if form.is_valid():",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "homework",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def homework(request):\n    if request.method==\"POST\":\n        form=HomeworkForm(request.POST)\n        if form.is_valid():\n            try:\n                finished=request.POST['is_finished']\n                if finished == 'on':\n                    finished=True\n                else:\n                    finished=False",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "update_homework",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def update_homework(request,pk=None):\n    homework=Homework.objects.get(id=pk)\n    if homework.is_finished==True:\n        homework.is_finished=False\n    else:\n        homework.is_finished=True \n    homework.save()\n    return redirect('homework')\n@login_required\ndef delete_homework(request,pk=None):",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "delete_homework",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def delete_homework(request,pk=None):\n    Homework.objects.get(id=pk).delete()\n    return redirect(\"homework\")\ndef youtube(request):\n    if request.method==\"POST\":\n        form=DashboardForm(request.POST)\n        text=request.POST['text']\n        video=VideosSearch(text,limit=20)\n        result_list=[]\n        for i in video.result()['result']:",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "youtube",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def youtube(request):\n    if request.method==\"POST\":\n        form=DashboardForm(request.POST)\n        text=request.POST['text']\n        video=VideosSearch(text,limit=20)\n        result_list=[]\n        for i in video.result()['result']:\n            result_dict={\n                'input':text,\n                'title':i['title'],",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "todo",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def todo(request):\n    if request.method=='POST':\n        form=TodoForm(request.POST)\n        if form.is_valid():\n            try:\n                finished=request.POST['is_finished']\n                if finished=='on':\n                    finished=True\n                else:\n                    finished=False",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "update_todo",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def update_todo(request,pk=None):\n    todo=Todo.objects.get(id=pk)\n    if todo.is_finished == True:\n        todo.is_finished = False\n    else:\n        todo.is_finished = True\n    todo.save()\n    return redirect(\"todo\")\n@login_required\ndef delete_todo(request,pk=None):",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "delete_todo",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def delete_todo(request,pk=None):\n    Todo.objects.get(id=pk).delete()\n    return redirect(\"todo\")\n# def books(request):\n#     form=DashboardForm()\n#     context={'form':form}\n#     return render(request,\"dashboard/books.html\",context)\n@login_required\ndef books(request):\n    if request.method==\"POST\":",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def books(request):\n    if request.method==\"POST\":\n        form=DashboardForm(request.POST)\n        text=request.POST['text']\n        url= \"https://www.googleapis.com/books/v1/volumes?q=\"+text\n        r=requests.get(url)\n        answer=r.json()\n        result_list=[]\n        for i in range(10):\n            result_dict={",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "dictionary",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def dictionary(request):\n    if request.method==\"POST\":\n        form=DashboardForm(request.POST)\n        text=request.POST['text']\n        url= \"https://api.dictionaryapi.dev/api/v2/entries/en/\"+text\n        r=requests.get(url)\n        answer=r.json()\n        try:\n            phonetics=answer[0]['phonetics'][0]['text']\n            audio=answer[0]['phonetics'][0]['audio']",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "wiki",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def wiki(request):\n    if request.method == 'POST':\n        text=request.POST['text']\n        form=DashboardForm(request.POST)\n        search=wikipedia.page(text)\n        context={\n            'form':form,\n            'title':search.title,\n            'link':search.url,\n            'details':search.summary",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "conversion",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def conversion(request):\n    if request.method=='POST':\n        form=ConversionForm(request.POST)\n        if request.POST['measurement']=='length':\n            measurement_form=ConversionLengthForm()\n            context={\n                'form':form,\n                'm_form':measurement_form,\n                'input':True\n            }",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def register(request):\n    if request.method=='POST':\n        form=UserRegistrationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            username=form.cleaned_data.get('username')\n            messages.success(request,f\"Account Created for {username}!!\")\n            return redirect(\"login\")\n    else:\n        form=UserRegistrationForm()",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def profile(request):\n    homeworks=Homework.objects.filter(is_finished=False,user=request.user)\n    todos=Todo.objects.filter(is_finished=False,user=request.user)\n    if len(homeworks)==0:\n        homework_done=True\n    else:\n        homework_done=False\n    if len(todos)==0:\n        todos_done=True\n    else:",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "studentstudyportal.asgi",
        "description": "studentstudyportal.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "studentstudyportal.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nPROJECT_ROOT=os.path.dirname(os.path.abspath(__file__))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-bku)a)g%0l^0^fv2x&wjcu#m_6*6z8&=8$2xz75)v1_i4h1dj8'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = ['codeblazestudyapp.herokuapp.com','localhost']\n# Application definition",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-bku)a)g%0l^0^fv2x&wjcu#m_6*6z8&=8$2xz75)v1_i4h1dj8'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\nALLOWED_HOSTS = ['codeblazestudyapp.herokuapp.com','localhost']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "DEBUG = False\nALLOWED_HOSTS = ['codeblazestudyapp.herokuapp.com','localhost']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['codeblazestudyapp.herokuapp.com','localhost']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'dashboard',",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'dashboard',\n    'crispy_forms',\n    'custom_user'",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'dashboard.CodeblazeStudyAppUser'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "ROOT_URLCONF = 'studentstudyportal.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR,'dashboard/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR,'dashboard/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "WSGI_APPLICATION = 'studentstudyportal.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME':'d2m1bcvhpji35l',\n        'USER':'qccunzwbaqsneu',\n        'PASSWORD':'04e52f7ef263438e3bf16f9e1f7d0aaa3815d88da154ff521ef1769d8eb69234',\n        'HOST':'ec2-34-234-240-121.compute-1.amazonaws.com',",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME':'d2m1bcvhpji35l',\n        'USER':'qccunzwbaqsneu',\n        'PASSWORD':'04e52f7ef263438e3bf16f9e1f7d0aaa3815d88da154ff521ef1769d8eb69234',\n        'HOST':'ec2-34-234-240-121.compute-1.amazonaws.com',\n        'PORT':'5432'\n    }\n}",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nCRISPY_TEMPLATE_PACK=\"bootstrap4\"\nLOGIN_REDIRECT_URL='index'",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nCRISPY_TEMPLATE_PACK=\"bootstrap4\"\nLOGIN_REDIRECT_URL='index'\nLOGIN_URL='login'",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nCRISPY_TEMPLATE_PACK=\"bootstrap4\"\nLOGIN_REDIRECT_URL='index'\nLOGIN_URL='login'\n# Default primary key field type",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nCRISPY_TEMPLATE_PACK=\"bootstrap4\"\nLOGIN_REDIRECT_URL='index'\nLOGIN_URL='login'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')\nCRISPY_TEMPLATE_PACK=\"bootstrap4\"\nLOGIN_REDIRECT_URL='index'\nLOGIN_URL='login'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "studentstudyportal.settings",
        "description": "studentstudyportal.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "studentstudyportal.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "studentstudyportal.urls",
        "description": "studentstudyportal.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include('dashboard.urls')),\n    path('register/',dash_views.register,name='register'),\n    path('login/',auth_views.LoginView.as_view(template_name=\"dashboard/login.html\"),name='login'),\n    path('logout/',auth_views.LogoutView.as_view(template_name=\"dashboard/logout.html\"),name='logout'),\n    path('profile/',dash_views.profile,name='profile'),\n]",
        "detail": "studentstudyportal.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "studentstudyportal.wsgi",
        "description": "studentstudyportal.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "studentstudyportal.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'studentstudyportal.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]